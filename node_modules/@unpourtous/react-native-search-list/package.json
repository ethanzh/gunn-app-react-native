{
  "_args": [
    [
      {
        "raw": "@unpourtous/react-native-search-list",
        "scope": "@unpourtous",
        "escapedName": "@unpourtous%2freact-native-search-list",
        "name": "@unpourtous/react-native-search-list",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/ethanzh/Desktop/gunn-app"
    ]
  ],
  "_from": "@unpourtous/react-native-search-list@latest",
  "_id": "@unpourtous/react-native-search-list@2.0.5",
  "_inCache": true,
  "_location": "/@unpourtous/react-native-search-list",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-search-list_2.0.5_1519651137171_0.42381930242081345"
  },
  "_npmUser": {
    "name": "erichua23",
    "email": "huatingzl@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@unpourtous/react-native-search-list",
    "scope": "@unpourtous",
    "escapedName": "@unpourtous%2freact-native-search-list",
    "name": "@unpourtous/react-native-search-list",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@unpourtous/react-native-search-list/-/react-native-search-list-2.0.5.tgz",
  "_shasum": "bc53f53ebc2cf5f7cbf749ec4aaa0a3587c83cbd",
  "_shrinkwrap": null,
  "_spec": "@unpourtous/react-native-search-list",
  "_where": "/Users/ethanzh/Desktop/gunn-app",
  "author": {
    "name": "haywood"
  },
  "bugs": {
    "url": "https://github.com/UnPourTous/react-native-search-list/issues"
  },
  "dependencies": {
    "is-buffer": "^1.1.6",
    "js-pinyin": "^0.1.9",
    "md5": "^2.2.1",
    "prop-types": "^15.6.0"
  },
  "description": "react native component for search list view",
  "devDependencies": {
    "babel-eslint": "^8.1.0",
    "babel-jest": "18.0.0",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-react-native": "1.9.1",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^6.2.1",
    "eslint-plugin-angular": "^2.3.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-node": "^4.2.2",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-react": "^6.10.3",
    "eslint-plugin-standard": "^2.3.1",
    "standard": "^10.0.3",
    "standardjs": "^1.0.0-alpha"
  },
  "directories": {
    "example": "example"
  },
  "dist": {
    "integrity": "sha512-RYfv0Y+HW8NbIZxsUczv6Om/pn0r+RVyvQ1CUyODoaKiWkyTXPxj8Aqe1sZgfvTuO2R0jDtBrugf+VC/DpthNQ==",
    "shasum": "bc53f53ebc2cf5f7cbf749ec4aaa0a3587c83cbd",
    "tarball": "https://registry.npmjs.org/@unpourtous/react-native-search-list/-/react-native-search-list-2.0.5.tgz",
    "fileCount": 29,
    "unpackedSize": 3313577
  },
  "gitHead": "f1b05d920c37fe0f81dba9920c74534407995953",
  "homepage": "https://github.com/UnPourTous/react-native-search-list#readme",
  "keywords": [
    "react-native",
    "search list",
    "pinyin",
    "animation",
    "alphabetic"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "erichua23",
      "email": "huatingzl@gmail.com"
    },
    {
      "name": "haywood",
      "email": "gladone2@gmail.com"
    },
    {
      "name": "lemori",
      "email": "lemori@outlook.com"
    },
    {
      "name": "mcalsace",
      "email": "289965916@qq.com"
    },
    {
      "name": "millerw",
      "email": "millerw@foxmail.com"
    }
  ],
  "name": "@unpourtous/react-native-search-list",
  "optionalDependencies": {},
  "peerDependency": {
    "react-native": ">= 0.40.0"
  },
  "readme": "# A searchable ListView which supports Chinese PinYin and alphabetical index.\n\n[![npm version](https://badge.fury.io/js/%40unpourtous%2Freact-native-search-list.svg)](https://badge.fury.io/js/%40unpourtous%2Freact-native-search-list)\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2FUnPourTous%2Freact-native-search-list.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2FUnPourTous%2Freact-native-search-list?ref=badge_shield)\n<a href=\"https://standardjs.com\"><img src=\"https://img.shields.io/badge/code_style-standard-brightgreen.svg\" alt=\"Standard - JavaScript Style Guide\"></a>\n[![Open Source Love](https://badges.frapsoft.com/os/mit/mit.svg?v=102)](https://github.com/ellerbrock/open-source-badge/)\n\n### React Native Search List\n\nA searchable ListView which supports Chinese PinYin and alphabetical index.\n\n<p align=\"center\">\n  <img src='https://raw.githubusercontent.com/UnPourTous/react-native-search-list/develop-refactor/screenshots/search-list-demo-v2.gif' />\n</p>\n\nThe following pic may be helpful when understanding the structure and APIs: \n\n<p align=\"center\">\n<img src='https://user-images.githubusercontent.com/1309744/36627720-fba7dade-1981-11e8-941f-03fc94af00ec.png' />\n</p>\n\n## Installation\n\n`$ npm install @unpourtous/react-native-search-list --save`\n\n## Usage\n\nTo Use SearchList, need a array of object as data source,and each object has searchStr property, eample code are put in `example/entry.js`.\n\n```js\nexport default class example extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      dataSource: demoList\n    }\n  }\n\n  // custom render row\n  renderRow (item, sectionID, rowID, highlightRowFunc, isSearching) {\n    return (\n      <Touchable onPress={() => {\n        Alert.alert('Clicked!', `sectionID: ${sectionID}; item: ${item.searchStr}`,\n          [\n            {text: 'OK', onPress: () => console.log('OK Pressed')},\n          ],\n          {cancelable: true})\n      }}>\n        <View key={rowID} style={{flex: 1, marginLeft: 20, height: rowHeight, justifyContent: 'center'}}>\n          {/*use `HighlightableText` to highlight the search result*/}\n          <HighlightableText\n            matcher={item.matcher}\n            text={item.searchStr}\n            textColor={'#000'}\n            hightlightTextColor={'#0069c0'}\n          />\n        </View>\n      </Touchable>\n    )\n  }\n\n  // render empty view when datasource is empty\n  renderEmpty () {\n    return (\n      <View style={styles.emptyDataSource}>\n        <Text style={{color: '#979797', fontSize: 18, paddingTop: 20}}> No Content </Text>\n      </View>\n    )\n  }\n\n  // render empty result view when search result is empty\n  renderEmptyResult (searchStr) {\n    return (\n      <View style={styles.emptySearchResult}>\n        <Text style={{color: '#979797', fontSize: 18, paddingTop: 20}}> No Result For <Text\n          style={{color: '#171a23', fontSize: 18}}>{searchStr}</Text></Text>\n        <Text style={{color: '#979797', fontSize: 18, alignItems: 'center', paddingTop: 10}}>Please search again</Text>\n      </View>\n    )\n  }\n\n  render () {\n    return (\n      <View style={styles.container}>\n        <StatusBar backgroundColor='#F00' barStyle='light-content' />\n        <SearchList\n          data={this.state.dataSource}\n          renderRow={this.renderRow.bind(this)}\n          renderEmptyResult={this.renderEmptyResult.bind(this)}\n          renderBackButton={() => null}\n          renderEmpty={this.renderEmpty.bind(this)}\n\n          rowHeight={rowHeight}\n\n          toolbarBackgroundColor={'#2196f3'}\n          title='Search List Demo'\n          cancelTitle='取消'\n          onClickBack={() => {}}\n\n          searchListBackgroundColor={'#2196f3'}\n\n          searchBarToggleDuration={300}\n\n          searchInputBackgroundColor={'#0069c0'}\n          searchInputBackgroundColorActive={'#6ec6ff'}\n          searchInputPlaceholderColor={'#FFF'}\n          searchInputTextColor={'#FFF'}\n          searchInputTextColorActive={'#000'}\n          searchInputPlaceholder='Search'\n          sectionIndexTextColor={'#6ec6ff'}\n          searchBarBackgroundColor={'#2196f3'}\n        />\n      </View>\n    )\n  }\n}\n```\n## APIs\n\nprop name | type | description | default value\n--- | --- | --- | --- \ndata | array | The rows of list view.each object should contain `searchStr`, it will be used for search source. If you have custom row id,you should set `searchKey` for each object. | \nrenderRow | number | Render your custom row content. | \nrowHeight | number | The height of the default row content, it will be used for scroll calculate. | `40`\nsectionHeaderHeight | number | The height of section header content. | `24`\nsearchListBackgroundColor | string | BackgroundColor for searchList. | `#171a23`\ntoolbarBackgroundColor | string | Toolbar background color. | `#171a23`\nsearchBarToggleDuration | number | Custom search bar animation duration. | `300`\nsearchBarBackgroundColor | string | Custom search bar background color. | `#171a23`\nsearchInputBackgroundColor | string | Custom search input default state background color. | \nsearchInputBackgroundColorActive | string | Custom search input searching state background color. | \nsearchInputPlaceholder | string | Custom search input placeholder text. | \nsearchInputPlaceholderColor | string | Custom search input placeholder text color. | \nsearchInputTextColor | string | Custom search input default state text color. | \nsearchInputTextColorActive | string | Custom search input searching state text color. | \nsearchBarBackgroundColor | string | Custom search bar background color. | \ntitle | string | Toolbar title. | \ntitleTextColor | string | Toolbar title text color. | \ncancelTextColor | string | Search bar cancel text color. | \ncancelTitle | string | Search bar cancel text color. | \nsectionIndexTextColor | string | Section index text color. | \nhideSectionList | bool | Whether to hide the alphabetical section listing view or not. |\nrenderSectionIndexItem | func | Custom render SectionIndexItem. |\nsortFunc | func | The sort function for the list view data source,sorting alphabetical by default  |\nresultSortFunc | func | The sort function for the search result,sorting first match position by default |\nonScrollToSection | func | The callback of alphabetical section view be clicked or touch. |\nrenderBackButton | func | Render a custom back buttom on Toolbar. |\nrenderEmpty | func | Render a view when data is empty.  |\nrenderEmptyResult | func | Render a view when search result is empty.  |\nrenderSeparator | func | Render row separator. |\nrenderSectionHeader | func | `renderSectionHeader` for the internal ListView  |\nrenderHeader | func | `renderHeader` for the internal ListView |\nrenderFooter | func | `renderFooter` for the internal ListView  |\nrenderRow | func | `renderRow` for the internal ListView |\nonSearchStart | func | Callback when searching start. |\nonSearchEnd | func | Callback when searching end. |\n\n\n## Thanks\n* [js-pinyin](https://github.com/waterchestnut/pinyin)\n* [md5](https://github.com/pvorb/node-md5)\n* [react-native-selectablesectionlistview](https://github.com/johanneslumpe/react-native-selectablesectionlistview)\n\n## TODO \n1. ~~add hightlight demo~~\n1. ~~test ios & android & android with status bar and without~~\n\n## License\nThis library is distributed under MIT Licence.\n\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2FUnPourTous%2Freact-native-search-list.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2FUnPourTous%2Freact-native-search-list?ref=badge_large)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/UnPourTous/react-native-search-list.git"
  },
  "scripts": {
    "run-android": "cd example; react-native run-android; cd -",
    "run-ios": "cd example; react-native run-ios; cd -",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.0.5"
}
